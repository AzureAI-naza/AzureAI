from loguru import logger
from typing import Dict, Any
from app.core.workflow import BaseWorkflow, WorkflowDefinition, WorkflowStep

class TypeScriptVerifierWorkflow(BaseWorkflow):
    """Workflow for TypeScript code verification"""

    def get_definition(self) -> WorkflowDefinition:
        return WorkflowDefinition(
            id="typescript_verifier",
            name="TypeScript Code Verifier",
            description="Verify TypeScript code for correctness using LLM",
            steps=[
                WorkflowStep(
                    id="verify",
                    type="llm",
                    config={
                        "model": "gpt-4o",
                        "system_prompt": (
                            "You are a TypeScript code correctness reviewer, the user's code is generated by the user's original requirements through a large model,"
                            "where the generated code may have illusions leading to incorrect logic, below are the requirements for your reply: \n"
                            "* If you believe the code is correct, please return `<result>True</result>`\n"
                            "* If you think there are logical errors, please return `<result>False</result><reasons><item>reason1 description</item><item>reason2 description</item></reason><suggested>code to be modified</suggested>`\n"
                            "* If the user's input is not a TypeScript code, then return `<result>False</result><error>Bad Request</error>`. \n\n"
                            "<rules>\n"
                            "The items that need to be checked are:\n"
                            "* Whether there are undefined function calls that are not imported from external sources\n"
                            "</rules>"
                        )
                    }
                )
            ]
        )

class TypeScriptVerifierAgent:
    def __init__(self):
        logger.info("Initializing TypeScript Verifier Agent")
        self.workflow = TypeScriptVerifierWorkflow()

    async def verify_code(self, code: str) -> Dict[str, Any]:
        """
        Verify TypeScript code using the verification workflow
        
        Args:
            code: The TypeScript code to verify
            
        Returns:
            Dict containing the verification result
        """
        try:
            # Build input data
            inputs = {
                "prompt": f"<codeGenerated>\n{code}\n</codeGenerated>"
            }

            # Execute workflow
            result = await self.workflow.execute(**inputs)

            if result["status"] == "error":
                return {
                    "status": "error",
                    "message": result["error"]
                }

            # Get verification result from workflow output
            verify_result = result["outputs"]["verify"]
            return {
                "status": "success",
                "result": verify_result.data["response"]
            }

        except Exception as e:
            logger.error(f"Error in TypeScript verification: {str(e)}")
            return {
                "status": "error",
                "message": str(e)
            }